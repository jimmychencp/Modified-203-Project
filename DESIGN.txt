For my project 1, majority of my function were moved to either Entity or WorldModel and I made most of my judgement mainly based on the parameter of the method, the instance variable being used, and the static variable in the classes and what they do.

For my transform* methods, moveTo* methods, and execute*Activity methods, I refactored them all into the Entity class, mostly by looking at what instance variable were being called within the method. The transform* methods were a bit tricky because I wasn't sure if I should have left them in the Functions class or move them to Entity because they were calling other methods using static variables from the Functions class.

In my WorldModel class, I refactored, all the get and set methods for Occupancy and Background and the methods that removes or adds or moves entity. I moved these here because WorldModel is the class that keeps track of all the entity that populates the world. Based on the instance variable used in these methods, I presumed any of the methods that calls .background or .occupancy to be placed in WorldModel.

All of the executeAction methods were placed in the Action class, where the game will execute activities and animations for different entities.

For all the methods that I left in the Functions class, which were the parse* methods, create* methods, methods used to find nearestEntity, the methods used to load and process images, and the helper methods such as adjacent and getNumFromRange. In my opinion, the helper methods can be moved or left alone in the Functions class, they don't really depent on other classes so there is no necessary reasons to move them. For the parse* and create* class, a lot of them uses the static variable available in the Functions class and also calls on ActionKind or EntityKind. It is better to leave these functions as is because removing them from Functions means you have to modified all the static variables being used and that's just more work for no good reason. Furthermore, since some of them calls upon ActionKind and EntityKind it is better to wait until we have modified the code to interface Action and Entity before we move them.